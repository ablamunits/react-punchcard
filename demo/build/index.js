!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/build",r(r.s=6)}([function(t,e){t.exports=React},function(t,e,r){var n;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var a=typeof n;if("string"===a||"number"===a)t.push(n);else if(Array.isArray(n)&&n.length){var c=o.apply(null,n);c&&t.push(c)}else if("object"===a)for(var u in n)r.call(n,u)&&n[u]&&t.push(u)}}return t.join(" ")}void 0!==t&&t.exports?(o.default=o,t.exports=o):void 0===(n=function(){return o}.apply(e,[]))||(t.exports=n)}()},function(t,e,r){"use strict";var n=this&&this.__assign||Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};Object.defineProperty(e,"__esModule",{value:!0}),e.normalizePoints=function(t){var e=Math.max.apply(Math,t.map(function(t){return t.y}));return t.map(function(t){var r=Math.floor(100*t.y/e);return n({},t,{y:r})})}},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var a=r(0),c=r(1),u=r(2),i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.defaultMaxDotScale=6,e.defaultMinDotScale=.5,e.renderDot=function(t,r){var n=e.props.maxDotScale||e.defaultMaxDotScale,o=e.props.minDotScale||e.defaultMinDotScale,c=t.y,u=Math.max(c*n/r,o),i={transform:"scale("+u+")"};return a.createElement("div",{className:"dot-wrapper",key:t.x,"data-scale":u},a.createElement("div",{style:i,className:"punch-card-dot"}))},e}return o(e,t),e.prototype.render=function(){var t=this,e=this.props,r=c("punch-card-row",e.className),n=u.normalizePoints(e.value.points),o=Math.max.apply(Math,n.map(function(t){return t.y}));return a.createElement("div",{className:r},a.createElement("div",{className:"punch-card-row-label"},e.value.label),a.createElement("div",{className:"punch-card-dot-container"},n.map(function(e){return t.renderDot(e,o)})))},e}(a.PureComponent);e.PunchCardRow=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),a=this&&this.__assign||Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};Object.defineProperty(e,"__esModule",{value:!0});var c=r(0),u=r(3),i=r(1),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.renderPunchCardAxis=function(){var t=e.props.value[0],r=t?t.points.map(function(t,r){return c.createElement("div",{key:r,className:"punch-card-axis-tick"},e.props.renderAxisTick(t))}):null;return c.createElement("div",{className:"punch-card-axis"},r)},e}return o(e,t),e.prototype.render=function(){var t=this.props,e=i("punch-card",t.className),r={maxDotScale:t.maxDotScale,minDotScale:t.minDotScale};return c.createElement("div",{className:e},t.value.map(function(t,e){return c.createElement(u.PunchCardRow,a({},r,{key:e,value:t}))}),t.renderAxisTick?this.renderPunchCardAxis():null)},e}(c.PureComponent);e.PunchCard=s},function(t,e){t.exports=ReactDOM},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var a=r(5),c=r(0),u=r(4),i=function(t,e){return new Array(t).fill("").map(function(t,r){return{id:r+1,label:"Row "+(r+1),points:new Array(e).fill("").map(function(t,e){return{x:e+1,y:Math.floor(1e3*Math.random())}})}})},s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={rows:[]},e.setRows=function(){return e.setState({rows:i(5,30)})},e}return o(e,t),e.prototype.componentDidMount=function(){this.setRows()},e.prototype.render=function(){return c.createElement("div",{className:"punch-card-demo"},c.createElement(u.PunchCard,{value:this.state.rows}),c.createElement("div",{className:"actions"},c.createElement("button",{onClick:this.setRows},"Refresh Data")))},e}(c.PureComponent);e.PunchCardDemo=s;var l=document.getElementById("demo");a.render(c.createElement(s,null),l)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,